/*
 * UniCrypt
 *
 *  UniCrypt(tm): Cryptographical framework allowing the implementation of cryptographic protocols e.g. e-voting
 *  Copyright (c) 2016 Bern University of Applied Sciences (BFH), Research Institute for
 *  Security in the Information Society (RISIS), E-Voting Group (EVG)
 *  Quellgasse 21, CH-2501 Biel, Switzerland
 *
 *  Licensed under Dual License consisting of:
 *  1. GNU Affero General Public License (AGPL) v3
 *  and
 *  2. Commercial license
 *
 *
 *  1. This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU Affero General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU Affero General Public License for more details.
 *
 *   You should have received a copy of the GNU Affero General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 *  2. Licensees holding valid commercial licenses for UniCrypt may use this file in
 *   accordance with the commercial license agreement provided with the
 *   Software or, alternatively, in accordance with the terms contained in
 *   a written agreement between you and Bern University of Applied Sciences (BFH), Research Institute for
 *   Security in the Information Society (RISIS), E-Voting Group (EVG)
 *   Quellgasse 21, CH-2501 Biel, Switzerland.
 *
 *
 *   For further information contact <e-mail: unicrypt@bfh.ch>
 *
 *
 * Redistributions of files must retain the above copyright notice.
 */
package ch.bfh.unicrypt.helper.prime;

import ch.bfh.unicrypt.helper.cache.Cache2D;
import ch.bfh.unicrypt.helper.math.MathUtil;
import ch.bfh.unicrypt.helper.random.RandomByteSequence;
import ch.bfh.unicrypt.helper.random.hybrid.HybridRandomByteSequence;
import ch.bfh.unicrypt.math.algebra.multiplicative.classes.GStarModPrime;
import java.math.BigInteger;

/**
 * Each instance of this class represents a prime number. This class is a specialization of {@link SpecialFactorization}
 * for the borderline case of a single prime factor {@code p} with exponent {@code 0}.
 * <p>
 * @see SpecialFactorization
 * @author R. Haenni
 * @version 2.0
 */
public class Prime
	   extends SpecialFactorization {

	private static final long serialVersionUID = 1L;

	// maps of smallest and largest prime numbers for common bit lenghts
	private static final Cache2D<Integer, BigInteger, Prime> CACHE1 = new Cache2D<>();
	private static final Cache2D<Integer, BigInteger, Prime> CACHE2 = new Cache2D<>();
	private static final Cache2D<Integer, BigInteger, Prime> CACHE3 = new Cache2D<>();

	static {
		Prime.CACHE1.put(128, MathUtil.TWO, new Prime(new BigInteger("8000000000000000000000000000001D", 16)));
		Prime.CACHE1.put(160, MathUtil.TWO, new Prime(new BigInteger("800000000000000000000000000000000000012B", 16)));
		Prime.CACHE1.put(192, MathUtil.TWO, new Prime(new BigInteger("800000000000000000000000000000000000000000000005", 16)));
		Prime.CACHE1.put(224, MathUtil.TWO, new Prime(new BigInteger("800000000000000000000000000000000000000000000000000000BD", 16)));
		Prime.CACHE1.put(256, MathUtil.TWO, new Prime(new BigInteger("800000000000000000000000000000000000000000000000000000000000005F", 16)));
		Prime.CACHE1.put(384, MathUtil.TWO, new Prime(new BigInteger("800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000171", 16)));
		Prime.CACHE1.put(512, MathUtil.TWO, new Prime(new BigInteger("8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006F", 16)));
		Prime.CACHE1.put(768, MathUtil.TWO, new Prime(new BigInteger("8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002BB", 16)));
		Prime.CACHE1.put(1024, MathUtil.TWO, new Prime(new BigInteger("8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000483", 16)));
		Prime.CACHE1.put(2048, MathUtil.TWO, new Prime(new BigInteger
		Prime.CACHE1.put(3072, MathUtil.TWO, new Prime(new BigInteger
		Prime.CACHE1.put(4096, MathUtil.TWO, new Prime(new BigInteger

		Prime.CACHE2.put(128, MathUtil.TWO, new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF61", 16)));
		Prime.CACHE2.put(160, MathUtil.TWO, new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD1", 16)));
		Prime.CACHE2.put(192, MathUtil.TWO, new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF13", 16)));
		Prime.CACHE2.put(224, MathUtil.TWO, new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1", 16)));
		Prime.CACHE2.put(256, MathUtil.TWO, new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF43", 16)));
		Prime.CACHE2.put(384, MathUtil.TWO, new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC3", 16)));
		Prime.CACHE2.put(512, MathUtil.TWO, new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDC7", 16)));
		Prime.CACHE2.put(768, MathUtil.TWO, new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCC7", 16)));
		Prime.CACHE2.put(1024, MathUtil.TWO, new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF97", 16)));
		Prime.CACHE2.put(2048, MathUtil.TWO, new Prime(new BigInteger
		Prime.CACHE2.put(3072, MathUtil.TWO, new Prime(new BigInteger
		Prime.CACHE2.put(4096, MathUtil.TWO, new Prime(new BigInteger

		Prime.CACHE3.put(128, MathUtil.TWO, new Prime(new BigInteger("B7E151628AED2A6ABF7158809CF4F441", 16)));
		Prime.CACHE3.put(160, MathUtil.TWO, new Prime(new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7161D", 16)));
		Prime.CACHE3.put(192, MathUtil.TWO, new Prime(new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA8B", 16)));
		Prime.CACHE3.put(224, MathUtil.TWO, new Prime(new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D991", 16)));
		Prime.CACHE3.put(256, MathUtil.TWO, new Prime(new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190D05D", 16)));
		Prime.CACHE3.put(384, MathUtil.TWO, new Prime(new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF324E7738926CFBE5F4BF8D8D8C31D85D", 16)));
		Prime.CACHE3.put(512, MathUtil.TWO, new Prime(new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF324E7738926CFBE5F4BF8D8D8C31D763DA06C80ABB1185EB4F7C7B5757F59719", 16)));
		Prime.CACHE3.put(768, MathUtil.TWO, new Prime(new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF324E7738926CFBE5F4BF8D8D8C31D763DA06C80ABB1185EB4F7C7B5757F5958490CFD47D7C19BB42158D9554F7B46BCED55C4D79FD5F24D6613C31C3839A3397", 16)));
		Prime.CACHE3.put(1024, MathUtil.TWO, new Prime(new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF324E7738926CFBE5F4BF8D8D8C31D763DA06C80ABB1185EB4F7C7B5757F5958490CFD47D7C19BB42158D9554F7B46BCED55C4D79FD5F24D6613C31C3839A2DDF8A9A276BCFBFA1C877C56284DAB79CD4C2B3293D20E9E5EAF02AC60ACC93EE61", 16)));
		Prime.CACHE3.put(2048, MathUtil.TWO, new Prime(new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF324E7738926CFBE5F4BF8D8D8C31D763DA06C80ABB1185EB4F7C7B5757F5958490CFD47D7C19BB42158D9554F7B46BCED55C4D79FD5F24D6613C31C3839A2DDF8A9A276BCFBFA1C877C56284DAB79CD4C2B3293D20E9E5EAF02AC60ACC93ED874422A52ECB238FEEE5AB6ADD835FD1A0753D0A8F78E537D2B95BB79D8DCAEC642C1E9F23B829B5C2780BF38737DF8BB300D01334A0D0BD8645CBFA73A6160FFE393C48CBBBCA060F0FF8EC6D31BEB5CCEED7F2F0BB088017163BC60DF45A0ECB1BCD289B06CBBFEA21AD08E1847F3F7378D56CED94640D6EF0D3D37BE6701379", 16)));
		Prime.CACHE3.put(3072, MathUtil.TWO, new Prime(new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF324E7738926CFBE5F4BF8D8D8C31D763DA06C80ABB1185EB4F7C7B5757F5958490CFD47D7C19BB42158D9554F7B46BCED55C4D79FD5F24D6613C31C3839A2DDF8A9A276BCFBFA1C877C56284DAB79CD4C2B3293D20E9E5EAF02AC60ACC93ED874422A52ECB238FEEE5AB6ADD835FD1A0753D0A8F78E537D2B95BB79D8DCAEC642C1E9F23B829B5C2780BF38737DF8BB300D01334A0D0BD8645CBFA73A6160FFE393C48CBBBCA060F0FF8EC6D31BEB5CCEED7F2F0BB088017163BC60DF45A0ECB1BCD289B06CBBFEA21AD08E1847F3F7378D56CED94640D6EF0D3D37BE67008E186D1BF275B9B241DEB64749A47DFDFB96632C3EB061B6472BBF84C26144E49C2D04C324EF10DE513D3F5114B8B5D374D93CB8879C7D52FFD72BA0AAE7277DA7BA1B4AF1488D8E836AF14865E6C37AB6876FE690B571121382AF341AFE94F77BCF06C83B8FF5675F0979074AD9A787BC5B9BD4B0C5937D3EDE4C3A79396216D7B", 16)));
		Prime.CACHE3.put(4096, MathUtil.TWO, new Prime(new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF324E7738926CFBE5F4BF8D8D8C31D763DA06C80ABB1185EB4F7C7B5757F5958490CFD47D7C19BB42158D9554F7B46BCED55C4D79FD5F24D6613C31C3839A2DDF8A9A276BCFBFA1C877C56284DAB79CD4C2B3293D20E9E5EAF02AC60ACC93ED874422A52ECB238FEEE5AB6ADD835FD1A0753D0A8F78E537D2B95BB79D8DCAEC642C1E9F23B829B5C2780BF38737DF8BB300D01334A0D0BD8645CBFA73A6160FFE393C48CBBBCA060F0FF8EC6D31BEB5CCEED7F2F0BB088017163BC60DF45A0ECB1BCD289B06CBBFEA21AD08E1847F3F7378D56CED94640D6EF0D3D37BE67008E186D1BF275B9B241DEB64749A47DFDFB96632C3EB061B6472BBF84C26144E49C2D04C324EF10DE513D3F5114B8B5D374D93CB8879C7D52FFD72BA0AAE7277DA7BA1B4AF1488D8E836AF14865E6C37AB6876FE690B571121382AF341AFE94F77BCF06C83B8FF5675F0979074AD9A787BC5B9BD4B0C5937D3EDE4C3A79396215EDAB1F57D0B5A7DB461DD8F3C75540D00121FD56E95F8C731E9C4D7221BBED0C62BB5A87804B679A0CAA41D802A4604C311B71DE3E5C6B400E024A6668CCF2E2DE86876E4F5C50000F0A93B3AA7E6342B302A0A47373B25F73E3B26D569FE2291AD36D6A147D1060B871A2801F9783764082FF592D9140DB1E9399DF4B0E14CAED9", 16)));

		Prime.CACHE1.put(1024, new BigInteger("800000000000000000000000000000000000012B", 16), new Prime(new BigInteger("80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007FFFFFFFFFFFAEC41EFA48B2E00000000000012B01", 16), new BigInteger("800000000000000000000000000000000000012B", 16)));
		Prime.CACHE1.put(2048, new BigInteger("800000000000000000000000000000000000000000000000000000BD", 16), new Prime(new BigIntegernew BigInteger("800000000000000000000000000000000000000000000000000000BD", 16)));
		Prime.CACHE1.put(3072, new BigInteger("800000000000000000000000000000000000000000000000000000000000005F", 16), new Prime(new BigIntegernew BigInteger("800000000000000000000000000000000000000000000000000000000000005F", 16)));
		Prime.CACHE1.put(1024, new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7161D", 16), new Prime(new BigInteger("8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AE0FF24A0966F9C07524358D41D1C3FF8114612813", 16), new BigInteger("800000000000000000000000000000000000012B", 16)));
		Prime.CACHE1.put(2048, new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D991", 16), new Prime(new BigInteger("80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000F58AB5CD12FA3CC1C94BCCA5EC37B8DBA2CD4400F2A6B75B09F7E4749", 16), new BigInteger("800000000000000000000000000000000000012B", 16)));
		Prime.CACHE1.put(3072, new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190D05D", 16), new Prime(new BigIntegernew BigInteger("800000000000000000000000000000000000012B", 16)));
		Prime.CACHE1.put(1024, new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD1", 16), new Prime(new BigInteger("8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002C5FFFFFFFFFFFFFFFEBEC11D0F7FFFFFFFFFFF7DA7", 16), new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD1", 16)));
		Prime.CACHE1.put(2048, new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1", 16), new Prime(new BigIntegernew BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1", 16)));
		Prime.CACHE1.put(3072, new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF43", 16), new Prime(new BigIntegernew BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF43", 16)));
		
		Prime.CACHE2.put(1024, new BigInteger("800000000000000000000000000000000000012B", 16), new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF7FFFFFFFFFF5D883DF49165BFFFFFFFFFFFFD9751", 16), new BigInteger("800000000000000000000000000000000000012B", 16)));
		Prime.CACHE2.put(2048, new BigInteger("800000000000000000000000000000000000000000000000000000BD", 16), new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFCA20000000000000000000000000000215CF4B176073BE3B9FFFFFB0735", 16), new BigInteger("800000000000000000000000000000000000000000000000000000BD", 16)));
		Prime.CACHE2.put(3072, new BigInteger("800000000000000000000000000000000000000000000000000000000000005F", 16), new Prime(new BigIntegernew BigInteger("800000000000000000000000000000000000000000000000000000000000005F", 16)));
		Prime.CACHE2.put(1024, new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7161D", 16), new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD30C1FE2A1061474947047B5FF48DA8EFA20F5FF3CF", 16), new BigInteger("800000000000000000000000000000000000012B", 16)));
		Prime.CACHE2.put(2048, new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D991", 16), new Prime(new BigIntegernew BigInteger("800000000000000000000000000000000000000000000000000000BD", 16)));
		Prime.CACHE2.put(3072, new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190D05D", 16), new Prime(new BigIntegernew BigInteger("800000000000000000000000000000000000000000000000000000000000005F", 16)));
		Prime.CACHE2.put(1024, new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD1", 16), new Prime(new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE07FFFFFFFFFFFFFFFD7D823A1F0000000000005C89", 16), new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD1", 16)));
		Prime.CACHE2.put(2048, new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1", 16), new Prime(new BigIntegernew BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1", 16)));
		Prime.CACHE2.put(3072, new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF43", 16), new Prime(new BigIntegernew BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF43", 16)));

		Prime.CACHE3.put(1024, new BigInteger("800000000000000000000000000000000000012B", 16), new Prime(new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF324E7738926CFBE5F4BF8D8D8C31D763DA06C80ABB1185EB4F7C7B5757F5958490CFD47D7C19BB42158D9554F7B46BCED55C4D79FD5F24D6613C31C3839A2DDF8A9A276BCFBFA1C877C5652CA7F7931BDA8CABB4457C14E1FBBD134B52CEB4C3", 16), new BigInteger("800000000000000000000000000000000000012B", 16)));
		Prime.CACHE3.put(2048, new BigInteger("800000000000000000000000000000000000000000000000000000BD", 16), new Prime(new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF324E7738926CFBE5F4BF8D8D8C31D763DA06C80ABB1185EB4F7C7B5757F5958490CFD47D7C19BB42158D9554F7B46BCED55C4D79FD5F24D6613C31C3839A2DDF8A9A276BCFBFA1C877C56284DAB79CD4C2B3293D20E9E5EAF02AC60ACC93ED874422A52ECB238FEEE5AB6ADD835FD1A0753D0A8F78E537D2B95BB79D8DCAEC642C1E9F23B829B5C2780BF38737DF8BB300D01334A0D0BD8645CBFA73A6160FFE393C48CBBBCA060F0FF8EC6D31BEB5CCEED7F2F0BB088017163BC60DF45A0ECB1BCD2CAEC7887776B4E2A99A09F3D85BA062F7EF08E55D435C6A7BD730F1A94F", 16), new BigInteger("800000000000000000000000000000000000000000000000000000BD", 16)));
		Prime.CACHE3.put(3072, new BigInteger("800000000000000000000000000000000000000000000000000000000000005F", 16), new Prime(new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF324E7738926CFBE5F4BF8D8D8C31D763DA06C80ABB1185EB4F7C7B5757F5958490CFD47D7C19BB42158D9554F7B46BCED55C4D79FD5F24D6613C31C3839A2DDF8A9A276BCFBFA1C877C56284DAB79CD4C2B3293D20E9E5EAF02AC60ACC93ED874422A52ECB238FEEE5AB6ADD835FD1A0753D0A8F78E537D2B95BB79D8DCAEC642C1E9F23B829B5C2780BF38737DF8BB300D01334A0D0BD8645CBFA73A6160FFE393C48CBBBCA060F0FF8EC6D31BEB5CCEED7F2F0BB088017163BC60DF45A0ECB1BCD289B06CBBFEA21AD08E1847F3F7378D56CED94640D6EF0D3D37BE67008E186D1BF275B9B241DEB64749A47DFDFB96632C3EB061B6472BBF84C26144E49C2D04C324EF10DE513D3F5114B8B5D374D93CB8879C7D52FFD72BA0AAE7277DA7BA1B4AF1488D8E836AF14865E6C37AB6876FE690B571121382AF341AFE94F781F4D9A222CEA0A610E79C6B2FE8855DFA1AFBCF8F654A0EB7AB44B5259D1B6122B", 16), new BigInteger("800000000000000000000000000000000000000000000000000000000000005F", 16)));
		Prime.CACHE3.put(1024, new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7161D", 16), new Prime(new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF324E7738926CFBE5F4BF8D8D8C31D763DA06C80ABB1185EB4F7C7B5757F5958490CFD47D7C19BB42158D9554F7B46BCED55C4D79FD5F24D6613C31C3839A2DDF8A9A276BCFBFA1C877C562C77CC8FBA599C5FBDA90A7EC659F50FB5FEA292209", 16), new BigInteger("800000000000000000000000000000000000012B", 16)));
		Prime.CACHE3.put(2048, new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D991", 16), new Prime(new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF324E7738926CFBE5F4BF8D8D8C31D763DA06C80ABB1185EB4F7C7B5757F5958490CFD47D7C19BB42158D9554F7B46BCED55C4D79FD5F24D6613C31C3839A2DDF8A9A276BCFBFA1C877C56284DAB79CD4C2B3293D20E9E5EAF02AC60ACC93ED874422A52ECB238FEEE5AB6ADD835FD1A0753D0A8F78E537D2B95BB79D8DCAEC642C1E9F23B829B5C2780BF38737DF8BB300D01334A0D0BD8645CBFA73A6160FFE393C48CBBBCA060F0FF8EC6D31BEB5CCEED7F2F0BB088017163BC60DF45A0ECB1BCD3548E571733F4A8C724DC97F56F0AE89897D8A6B93C6F87D7494503A5D6D", 16), new BigInteger("800000000000000000000000000000000000000000000000000000BD", 16)));
		Prime.CACHE3.put(3072, new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190D05D", 16), new Prime(new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF324E7738926CFBE5F4BF8D8D8C31D763DA06C80ABB1185EB4F7C7B5757F5958490CFD47D7C19BB42158D9554F7B46BCED55C4D79FD5F24D6613C31C3839A2DDF8A9A276BCFBFA1C877C56284DAB79CD4C2B3293D20E9E5EAF02AC60ACC93ED874422A52ECB238FEEE5AB6ADD835FD1A0753D0A8F78E537D2B95BB79D8DCAEC642C1E9F23B829B5C2780BF38737DF8BB300D01334A0D0BD8645CBFA73A6160FFE393C48CBBBCA060F0FF8EC6D31BEB5CCEED7F2F0BB088017163BC60DF45A0ECB1BCD289B06CBBFEA21AD08E1847F3F7378D56CED94640D6EF0D3D37BE67008E186D1BF275B9B241DEB64749A47DFDFB96632C3EB061B6472BBF84C26144E49C2D04C324EF10DE513D3F5114B8B5D374D93CB8879C7D52FFD72BA0AAE7277DA7BA1B4AF1488D8E836AF14865E6C37AB6876FE690B571121382AF341AFE94F790F02FA1BCE9C73886B4C0ACABDC3DD14E0D8C955577C9764844038771FC25F84BB", 16), new BigInteger("800000000000000000000000000000000000000000000000000000000000005F", 16)));
		Prime.CACHE3.put(1024, new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD1", 16), new Prime(new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF324E7738926CFBE5F4BF8D8D8C31D763DA06C80ABB1185EB4F7C7B5757F5958490CFD47D7C19BB42158D9554F7B46BCED55C4D79FD5F24D6613C31C3839A2DDF8A9A276BCFBFA1C877C5631612AF6D4AD512B966641A98DDCFAD8DF33B988541", 16), new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFD1", 16)));
		Prime.CACHE3.put(2048, new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1", 16), new Prime(new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF324E7738926CFBE5F4BF8D8D8C31D763DA06C80ABB1185EB4F7C7B5757F5958490CFD47D7C19BB42158D9554F7B46BCED55C4D79FD5F24D6613C31C3839A2DDF8A9A276BCFBFA1C877C56284DAB79CD4C2B3293D20E9E5EAF02AC60ACC93ED874422A52ECB238FEEE5AB6ADD835FD1A0753D0A8F78E537D2B95BB79D8DCAEC642C1E9F23B829B5C2780BF38737DF8BB300D01334A0D0BD8645CBFA73A6160FFE393C48CBBBCA060F0FF8EC6D31BEB5CCEED7F2F0BB088017163BC60DF45A0ECB1BCD2B1C637105E91A734641306292E055F2BCEC4F688D1C2B653269A7AB3161", 16), new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC1", 16)));
		Prime.CACHE3.put(3072, new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF43", 16), new Prime(new BigInteger("B7E151628AED2A6ABF7158809CF4F3C762E7160F38B4DA56A784D9045190CFEF324E7738926CFBE5F4BF8D8D8C31D763DA06C80ABB1185EB4F7C7B5757F5958490CFD47D7C19BB42158D9554F7B46BCED55C4D79FD5F24D6613C31C3839A2DDF8A9A276BCFBFA1C877C56284DAB79CD4C2B3293D20E9E5EAF02AC60ACC93ED874422A52ECB238FEEE5AB6ADD835FD1A0753D0A8F78E537D2B95BB79D8DCAEC642C1E9F23B829B5C2780BF38737DF8BB300D01334A0D0BD8645CBFA73A6160FFE393C48CBBBCA060F0FF8EC6D31BEB5CCEED7F2F0BB088017163BC60DF45A0ECB1BCD289B06CBBFEA21AD08E1847F3F7378D56CED94640D6EF0D3D37BE67008E186D1BF275B9B241DEB64749A47DFDFB96632C3EB061B6472BBF84C26144E49C2D04C324EF10DE513D3F5114B8B5D374D93CB8879C7D52FFD72BA0AAE7277DA7BA1B4AF1488D8E836AF14865E6C37AB6876FE690B571121382AF341AFE94F8571F00F8F7F78B2C8939AD1AFA0A55344C6AAB78F4888593E50C21319649EFC92AB", 16), new BigInteger("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF43", 16)));
	}

	// a prime factor of p-1
	private BigInteger orderFactor;

	// 2 is a special case (p-1 has no prime factor)
	protected Prime() {
		this(MathUtil.TWO, null);
	}

	// unknown order factor
	protected Prime(BigInteger prime) {
		this(prime, MathUtil.TWO);
	}

	// known order factor
	protected Prime(BigInteger prime, BigInteger orderFactor) {
		super(prime, new BigInteger[]{prime}, new Integer[]{1});
		this.orderFactor = orderFactor;
	}

	/**
	 * Checks if the prime number is a safe prime.
	 * <p>
	 * @return {@code true} if it is a safe prime, {@code false} otherwise
	 */
	public boolean isSafe() {
		return MathUtil.isSafePrime(this.value);
	}

	/**
	 * Returns the known prime factor of {@code p-1}, or {@code null} for {@code p=2}.
	 * <p>
	 * @return The prime factor
	 */
	public Prime getOrderFactor() {
		return Prime.getInstance(this.orderFactor);
	}

	/**
	 * Creates a new prime number from a given integer value of type {@code long}. This method is a convenience method
	 * for {@link Prime#getInstance(BigInteger)}. Throws an exception if the given integer is not prime.
	 * <p>
	 * @param prime The given integer value
	 * @return The new prime
	 */
	public static Prime getInstance(long prime) {
		return Prime.getInstance(BigInteger.valueOf(prime));
	}

	/**
	 * Creates a new prime number from a given integer value of type {@link BigInteger}. Throws an exception if the
	 * given integer is not prime.
	 * <p>
	 * @param prime The given integer value
	 * @return The new prime
	 */
	public static Prime getInstance(BigInteger prime) {
		if (prime == null || !MathUtil.isPrime(prime)) {
			throw new IllegalArgumentException();
		}
		return new Prime(prime);
	}

	/**
	 * Returns the smallest prime number of a given bit length.
	 * <p>
	 * @param bitLength The given bit length
	 * @return The new prime
	 */
	public static Prime getSmallestInstance(int bitLength) {
		if (bitLength < 2) {
			throw new IllegalArgumentException();
		}
		if (bitLength == 2) {
			return new Prime();
		}
		// bitLength > 2
		return Prime.getSmallestInstance(bitLength, MathUtil.TWO);
	}

	/**
	 * Returns the smallest prime number {@code p} of a given bit length such that {@code p-1} divides
	 * {@code orderFactor}. Such primes are required in {@link GStarModPrime#getInstance(Prime, Prime)}.
	 * <p>
	 * @param bitLength   The bit length of {@code p}
	 * @param orderFactor The prime factor of {@code p-1}
	 * @return The new prime
	 */
	public static Prime getSmallestInstance(int bitLength, BigInteger orderFactor) {
		if (bitLength == 2 && orderFactor.equals(MathUtil.TWO)) {
			return new Prime(MathUtil.THREE);
		}
		if (bitLength < 3 || orderFactor == null || !MathUtil.isPrime(orderFactor) || bitLength <= orderFactor.bitLength()) {
			throw new IllegalArgumentException();
		}
		Prime prime = CACHE1.get(bitLength, orderFactor);
		if (prime == null) {
			BigInteger candidate = MathUtil.powerOfTwo(bitLength - 1).add(MathUtil.ONE);
			BigInteger increase;
			if (orderFactor.equals(MathUtil.TWO)) {
				increase = MathUtil.TWO;
			} else {
				increase = orderFactor.shiftLeft(1);
				// the smallest possible value is 2*orderFactor+1
				candidate = candidate.max(increase.add(MathUtil.ONE));
				// compute the smallest possible candidate
				if (!candidate.mod(increase).equals(MathUtil.ONE)) {
					candidate = candidate.subtract(MathUtil.ONE).divide(increase).add(MathUtil.ONE).multiply(increase).add(MathUtil.ONE);
				}
			}
			while (!MathUtil.isPrime(candidate)) {
				candidate = candidate.add(increase);
				if (candidate.bitLength() > bitLength) {
					throw new IllegalArgumentException();
				}
			}
			prime = new Prime(candidate, orderFactor);
			CACHE1.put(bitLength, orderFactor, prime);
		}
		return prime;
	}

	/**
	 * Returns the largest prime number of a given bit length.
	 * <p>
	 * @param bitLength The given bit length
	 * @return The new prime
	 */
	public static Prime getLargestInstance(int bitLength) {
		if (bitLength < 2) {
			throw new IllegalArgumentException();
		}
		return Prime.getLargestInstance(bitLength, MathUtil.TWO);
	}

	/**
	 * Returns the largest prime number {@code p} of a given bit length such that {@code p-1} divides
	 * {@code orderFactor}. Such primes are required in {@link GStarModPrime#getInstance(Prime, Prime)}.
	 * <p>
	 * @param bitLength   The bit length of {@code p}
	 * @param orderFactor The prime factor of {@code p-1}
	 * @return The new prime
	 */
	public static Prime getLargestInstance(int bitLength, BigInteger orderFactor) {
		if (bitLength == 2 && MathUtil.TWO.equals(orderFactor)) {
			return new Prime(MathUtil.THREE);
		}
		if (bitLength < 3 || orderFactor == null || !MathUtil.isPrime(orderFactor) || bitLength <= orderFactor.bitLength()) {
			throw new IllegalArgumentException();
		}
		Prime prime = CACHE2.get(bitLength, orderFactor);
		if (prime == null) {
			BigInteger candidate = MathUtil.powerOfTwo(bitLength).subtract(MathUtil.ONE);
			BigInteger increase;
			if (orderFactor.equals(MathUtil.TWO)) {
				increase = MathUtil.TWO;
			} else {
				increase = orderFactor.shiftLeft(1);
				// compute the smallest possible candidate
				if (!candidate.mod(increase).equals(MathUtil.ONE)) {
					candidate = candidate.subtract(MathUtil.ONE).divide(increase).multiply(increase).add(MathUtil.ONE);
				}
			}
			while (!MathUtil.isPrime(candidate)) {
				candidate = candidate.subtract(increase);
				if (candidate.bitLength() < bitLength) {
					throw new IllegalArgumentException();
				}
			}
			prime = new Prime(candidate, orderFactor);
			CACHE2.put(bitLength, orderFactor, prime);
		}
		return prime;
	}

	public static Prime getNextInstance(int bitLength) {
		if (bitLength < 0) {
			throw new IllegalArgumentException();
		}
		if (bitLength <= 1) {
			return new Prime();
		}
		return Prime.getNextInstance(bitLength, MathUtil.TWO);
	}

	public static Prime getNextInstance(int bitLength, BigInteger orderFactor) {
		String euler
		if (bitLength < 0 || bitLength > 4 * euler.length() || !MathUtil.isPrime(orderFactor)) {
			throw new IllegalArgumentException();
		}
		Prime prime = CACHE3.get(bitLength, orderFactor);
		if (prime == null) {
			BigInteger lowerBound;
			if (bitLength == 0) {
				lowerBound = MathUtil.ZERO;
			} else {
				lowerBound = new BigInteger(euler.substring(0, (bitLength + 3) / 4), 16).shiftRight((4 - (bitLength % 4)) % 4);
			}
			prime = Prime.getNextInstance(lowerBound, orderFactor);
			CACHE3.put(bitLength, orderFactor, prime);
		}
		return prime;
	}

	public static Prime getNextInstance(BigInteger lowerBound) {
		if (lowerBound.compareTo(MathUtil.TWO) < 0) {
			return new Prime();
		}
		return Prime.getNextInstance(lowerBound, MathUtil.TWO);
	}

	public static Prime getNextInstance(BigInteger lowerBound, BigInteger orderFactor) {
		if (!MathUtil.isPrime(orderFactor)) {
			throw new IllegalArgumentException();
		}
		// compute the increase for the search loop
		BigInteger increase;
		if (orderFactor.equals(MathUtil.TWO)) {
			increase = MathUtil.TWO;
		} else {
			increase = orderFactor.shiftLeft(1);
		}
		
		// compute the actual lower bound
		lowerBound = lowerBound.max(increase);
		
		// compute the first candidate
		BigInteger candidate = lowerBound.add(MathUtil.ONE);
		if (!candidate.mod(increase).equals(MathUtil.ONE)) {
			candidate = candidate.add(MathUtil.ONE).divide(increase).add(MathUtil.ONE).multiply(increase).add(MathUtil.ONE);
		}
		
		// main search loop
		while (!MathUtil.isPrime(candidate)) {
			candidate = candidate.add(increase);
		}
		
		return new Prime(candidate, orderFactor);
	}

	/**
	 * Creates a new random prime number of a given bit length using the library's default random byte sequence.
	 * <p>
	 * @param bitLength The bit length
	 * @return The new prime
	 */
	public static Prime getRandomInstance(int bitLength) {
		return Prime.getRandomInstance(bitLength, HybridRandomByteSequence.getInstance());
	}

	/**
	 * Creates a new random prime number of a given bit length using a given random byte sequence.
	 * <p>
	 * @param bitLength          The bit length
	 * @param randomByteSequence The given source of randomness
	 * @return The new prime
	 */
	public static Prime getRandomInstance(int bitLength, RandomByteSequence randomByteSequence) {
		if (bitLength < 2 || randomByteSequence == null) {
			throw new IllegalArgumentException();
		}
		return new Prime(randomByteSequence.getRandomBigIntegerSequence(bitLength).find(value -> MathUtil.isPrime(value)));
	}

}
