Primary developement environment of this software is Ubuntu 14.04.5 LTS using Coq 8.8.2, Ocaml-4.06.0 and Java 1.8.0_141. 

A quick way to run this software on Linux system is to just run it on the ballots distributed with this software by 

> make runlinux < ballot_100.txt 

You can generate the ballots by running

> make ballot_gen
>./ballot.out (number-of-ballots-you-want-to-generate) > file-name.txt

For testing purpose, we have used 

prime = 170141183460469231731687303715884114527
generator = 4
publickey = 49228593607874990954666071614777776087
privatekey = 60245260967214266009141128892124363925

as group infrastructure, and hard-coded in our development for running code, but 
this is certainly not a good idea for real election. Key management itself is a 
topic in itself, and these values can be supplied to us by any extenal entity. 



You can run the benchmarks by running

> make bench


We have distributed all the required Jar files in the directory "jarfiles" by compiling the source code. You can get the 
source code of these jarfiles from 
> https://github.com/java-native-access/jna
> https://github.com/square/jna-gmp/
> https://github.com/Julow/ocaml-java
> https://github.com/bfh-evg/unicrypt/

schulze.jar is created from CryptoWrappers.java. The reson for this jar to exists is, Ocaml-java binding 
does not support variable argument, so we could not write the Ocaml bindings for any java function which takes 
variable argument. In our case, it is 
EqualityPreimageProofSystem getInstance(final Function... proofFunctions)




